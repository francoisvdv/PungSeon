\begin{schema}{Server}
lobbyIPs: list list String\\
readyList: list list bool
\end{schema}
Note: lobbyIP's strings are in the standard IP4 format

\begin{schema}{File}
title: String\\
content: String
\end{schema}

\begin{schema}{Message}
label: String\\
data: String\\
IP: String
\end{schema}
Note: the label and the parameters in data are separated by a komma for convenience.

HandleRequest is the union of all the following server operations

When the server receives from a client the Ready message, the readyList is updated and a message is broadcasted to all the clients listed in the same lobby that the player is ready.
\begin{schema}{Ready}
\Delta Server\\
i?: Message\\
o!: Message
\where
i?.label = "Ready"\\
\exists[n,j \ in \mathbb{N} \and j < 6 \and i?.IP = lobbyIPs[n][j] : readyList'[n][j] = true]\\
o!.label = "Ready"
o!.data = i?.IP
\end{schema}
Note: indexing of a list is denoted by [i] where i is the index.
Note 2: The output message for Ready is broadcasted to all clients whos IP are recorded in the same list at index n. 

The server receives a CreateLobby message, and instantiates a new list in lobbyIPs representing the new lobby.
\begin{schema}{CreateLobby}
\Delta Server\\
i?: Message
\where
i?.label = "CreateLobby"\\
\forall[j \in \matbb{N} \and j < 6 : \exists[k \in \matbb{N}: lobbyIPs[n][j] = ""]
lobbyIPs'[(int) i?.data][0] = i?.IP
readyList'[(int) i?.data][0] = false
\end{schema}
Note: (int) is a function that casts the type of the variable behind it to an integer.

This will add the client that sent the JoinLobby message to the list of IP's in lobbyIPs with the index specified in the message.
\begin{schema}{JoinLobby}
\Delta Server\\
i?: Message
\where
i?.label = "JoinLobby"\\
\exists[j \in \mathbb{N} \and j < 6 \and lobbyIPs[(int) i?.data][j] = "" : lobbyIPs'[(int) i?.data][j] = i?.IP \and readyList'[(int) i?.data][j] = false]\\
\end{schema}

This will remove the client that sent the LeaveLobby message from the list of IP's in lobbyIPs.
\begin{schema}{LeaveLobby}
\Delta Server\\
i?: Message
\where
i?.label = "LeaveLobby"
\exists[n,j \in \matbb{N} \and j < 6 \and lobbyIPs[n][j] = i?.IP : lobbyIPs'[n][j] = "" \and readyList'[n][j] = true]
\end{schema}
Note: if you are the last person in the list the lobby will be completely removed from lobbyIPs.

This is executed when:
1. Everyone in the list is ready
2. There are at least 2 players in the list
\begin{schema}{Start}
\Delta Server\\
\Delta Client\\
o!: Message
\where
\exists[n \in \matbb{N} :\\
\forall[j \in \matbb{N} \and j < 6 : readyList[n][j] = true \and 
\exists[k,l \matbb{N}: lobbyIPs[n][k]/= "" \and lobbyIPs[n][l]/= ""] \and
\forall[j \in \matbb{N} \and j < 6 : lobbyIPs[n][j] = "" \and readyList'[n][j] = true] \and
o!.data = lobbyIPs[n]]\\
o!.label = "Start"
\end{schema}
Note: "" represents is the empty string.

Send the high scores to the client that send the GetHighScore message.
\begin{schema}{GetHighScore}
\Xi Server\\
\Xi File\\
i?: Message\\
o?: Message
\where
title = "GetHighscore"
i?.label = "GetHighscore"
o!.label = "GetHighscore"
o!.data = content
\end{schema}

Send the lobby status to the client that sent the GetLobby message.
\begin{schema}{GetLobby}
\Xi Server\\
i?: Message\\
o?: Message
l: list \matbb{N}
\where
i?.label = "GetLobby"
o!.label = "GetLobby"
\forall[n \in \matbb{N} \and n < \# lobbyIPs : l[n] = \#lobbyIPs[n]]
o!.data = (String) l
\end{schema}

The server receives a SetHighScores message and writes the high scores in a file.
\begin{schema}{SetHighScores}
\Xi Server\\
\Delta File\\
i?: Message\\
\where
i?.label = "SetHighscores"
content = i?.data
\end{schema}

Whenever a message is sent in the incorrect format or is not one of the above messages an error is sent back.
\begin{schema}{Error}
\Xi Server\\
i?: Message\\
o!: Message\\
\where
o!.label = "Error"
\end{schema}
informal: i? does not satisfy the conditions for any other handle procedure

WaitRequest, waits until the server receives a message from the client and then calls HandleRequest with the message as parameter.

Connect, creates a tcp connection between a client and the server

\begin{schema}{Client}
username: String\\
players: list String
\end{schema}

The client sends a message to either the server or a connected peer.
\begin{schema}{SendMessage}
\Xi Client
i?: Message
o!: String
\where
o! = i?.label + i?.data
\end{schema}
Note: string concatenation is denoted with a +

The client receives messages from whatever it is connected to.
\begin{schema}{ReceiveMessage}
\Xi Client
label?: String
data?: String
o!: Message
\where
o!.label = label?
o!.data = data?
\end{schema}

Connect, this creates a tcp connection with the server or between clients.